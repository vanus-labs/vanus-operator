// Code generated by go-swagger; DO NOT EDIT.

package connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/vanus-labs/vanus-operator/api/models"
)

// PatchConnectorHandlerFunc turns a function with the right signature into a patch connector handler
type PatchConnectorHandlerFunc func(PatchConnectorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchConnectorHandlerFunc) Handle(params PatchConnectorParams) middleware.Responder {
	return fn(params)
}

// PatchConnectorHandler interface for that can handle valid patch connector params
type PatchConnectorHandler interface {
	Handle(PatchConnectorParams) middleware.Responder
}

// NewPatchConnector creates a new http.Handler for the patch connector operation
func NewPatchConnector(ctx *middleware.Context, handler PatchConnectorHandler) *PatchConnector {
	return &PatchConnector{Context: ctx, Handler: handler}
}

/*
	PatchConnector swagger:route PATCH /connectors/{name} connector patchConnector

patch Connector
*/
type PatchConnector struct {
	Context *middleware.Context
	Handler PatchConnectorHandler
}

func (o *PatchConnector) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchConnectorParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchConnectorOKBody patch connector o k body
//
// swagger:model PatchConnectorOKBody
type PatchConnectorOKBody struct {

	// code
	// Required: true
	Code *int32 `json:"code"`

	// data
	// Required: true
	Data *models.ConnectorInfo `json:"data"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this patch connector o k body
func (o *PatchConnectorOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchConnectorOKBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("patchConnectorOK"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchConnectorOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("patchConnectorOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchConnectorOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

func (o *PatchConnectorOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("patchConnectorOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this patch connector o k body based on the context it is used
func (o *PatchConnectorOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchConnectorOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchConnectorOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchConnectorOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchConnectorOKBody) UnmarshalBinary(b []byte) error {
	var res PatchConnectorOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
